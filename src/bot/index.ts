import {
  Client,
  GatewayIntentBits,
  SlashCommandBuilder,
  REST,
  Routes,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ModalSubmitInteraction,
  AttachmentBuilder,
  Message,
  User,
  DMChannel,
  ButtonInteraction,
  Partials,
  Interaction,
} from "discord.js";
import * as dotenv from "dotenv";
import axios from "axios";
import { Course } from "../models/Course";
import * as QRCode from "qrcode";
import jsQR from "jsqr";
import { createCanvas, loadImage } from "canvas";

dotenv.config();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.MessageContent,
  ],
  partials: [Partials.Channel],
});

const clientId = process.env.CLIENT_ID;
const guildId = process.env.GUILD_ID;
const rest = new REST({ version: "10" }).setToken(process.env.DISCORD_TOKEN!);
const API_BASE_URL = process.env.API_BASE_URL || "http://localhost:3000";

// Global collector maps
const activeCollectors = new Map<string, any>();
const activeCollectorsDm = new Map<string, any>();

// ============= COMMAND REGISTRATION =============
const commands = [
  new SlashCommandBuilder().setName("menu").setDescription("‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"),
].map((command) => command.toJSON());

(async () => {
  try {
    console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands...");
    await rest.put(Routes.applicationGuildCommands(clientId!, guildId!), {
      body: commands,
    });
    console.log("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:", error);
  }
})();

client.once("ready", () => {
  console.log(`logged in as ${client.user?.tag}`);
});

// ============= HELPER FUNCTIONS =============

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö embed ‡∏û‡∏£‡πâ‡∏≠‡∏° attachment
 */
async function createQRPaymentEmbed(
  transactionId: string,
  price: number,
  discountMessage?: string
) {
  const response_QR = await axios.post(
    `${API_BASE_URL}/transaction/createQrCode`,
    { transactionId }
  );

  const qrBuffer = await QRCode.toBuffer(response_QR.data.qrCodeData);
  const qrAttachment = new AttachmentBuilder(qrBuffer, { name: "qrcode.png" });
  const formattedPrice = Number(price).toLocaleString("th-TH");

  const description = [
    discountMessage || "",
    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
    "",
    "üïí *‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ñ‡πà ",
    "**10 ‡∏ô‡∏≤‡∏ó‡∏µ** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ upload ‡πÇ‡∏õ‡∏£‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡∏Å‡∏î!!!*",
    "",
    `**‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞:** ‡∏ø${formattedPrice}`,
  ]
    .filter((line) => line !== "")
    .join("\n");

  const embed = {
    color: 0x00bfff,
    title: "!! ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£  !!",
    description,
    image: { url: "attachment://qrcode.png" },
    footer: { text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ BennyBot" },
    timestamp: new Date().toISOString(),
  };

  return { embed, qrAttachment };
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
 */
async function handleUploadSlip(
  buttonInteraction: ButtonInteraction,
  transactionData: any
) {
  await buttonInteraction.deferReply({ ephemeral: true });
  const user: User = buttonInteraction.user;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á DM Channel
  let dmChannel: DMChannel;
  try {
    dmChannel = await user.createDM();
  } catch (err) {
    await buttonInteraction.followUp({
      content: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î DM ‡∏Å‡∏±‡∏ö bot ‡∏Å‡πà‡∏≠‡∏ô",
      ephemeral: true,
    });
    return;
  }

  await buttonInteraction.followUp({
    content: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Å DM ‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏ú‡πà‡∏≤‡∏ô DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ö Bot",
    ephemeral: true,
  });

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ countdown
  const duration = 600;
  let remaining = duration;

  const sentMessage = await dmChannel.send(
    `üìé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ó‡∏µ‡πà DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á bot ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!`
  );

  let interval: NodeJS.Timeout | null = setInterval(async () => {
    remaining--;
    try {
      await sentMessage.edit(
        `üìé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ó‡∏µ‡πà DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á bot ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!`
      );
    } catch {
      if (interval) {
        clearInterval(interval);
        interval = null;
      }
    }
    if (remaining <= 0) {
      if (interval) {
        clearInterval(interval);
        interval = null;
      }
      try {
        await sentMessage.edit(
          "‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÇ‡∏î‡∏¢ /menu ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å"
        );
      } catch {}
    }
  }, 1000);

  // Stop collector ‡πÄ‡∏Å‡πà‡∏≤
  const oldCollector = activeCollectorsDm.get(user.id);
  if (oldCollector && !oldCollector.ended) {
    oldCollector.stop("new_interaction_DM");
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á DM collector ‡πÉ‡∏´‡∏°‡πà
  const dmCollector = dmChannel.createMessageCollector({
    filter: (m) => m.author.id === user.id && m.attachments.size > 0,
    time: 600_000,
    max: 1,
  });

  activeCollectorsDm.set(user.id, dmCollector);

  // Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ collector ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠ stop
  dmCollector.on("end", (collected, reason) => {
    console.log(`DM Collector ended for ${user.username}: ${reason}`);
    if (interval) {
      clearInterval(interval);
      interval = null;
    }
    activeCollectorsDm.delete(user.id);
    activeCollectors.delete(user.id);
  });

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏¥‡∏õ
  dmCollector.on("collect", async (m: Message) => {
    if (interval) {
      clearInterval(interval);
      interval = null;
    }

    const slip = m.attachments.first();
    if (!slip) {
      dmCollector.stop("no_attachment");
      return;
    }

    await dmChannel.send(`‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ...`);

    try {
      // ‡∏≠‡πà‡∏≤‡∏ô QR Code ‡∏à‡∏≤‡∏Å‡∏™‡∏•‡∏¥‡∏õ
      const image = await loadImage(slip.url);
      const canvas = createCanvas(image.width, image.height);
      const ctx = canvas.getContext("2d");
      ctx.drawImage(image, 0, 0);

      const imageData = ctx.getImageData(0, 0, image.width, image.height);
      const qrCode = jsQR(imageData.data, imageData.width, imageData.height);

      if (!qrCode) {
        await dmChannel.send(
          `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
        );
        dmCollector.stop("no_qr_code");
        return;
      }

      const qrData = qrCode.data;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏±‡∏ö SlipOK API
      try {
        const verifyResponse = await axios.post(
          `https://api.slipok.com/api/line/apikey/${process.env.BRANCH_ID}`,
          {
            data: qrData,
            log: true,
            amount: Number(transactionData.price),
          },
          {
            headers: {
              "Content-Type": "application/json",
              "x-authorization": process.env.SLIPOK_API_KEY,
            },
          }
        );

        if (verifyResponse.data.success) {
          await dmChannel.send(
            `‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÉ‡∏ô discord ‡πÅ‡∏•‡∏∞ ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô!`
          );

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          await axios.put(`${API_BASE_URL}/transaction/updatePaymentStatus`, {
            id: transactionData.id,
            paid: true,
          });

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏®‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          try {
            const guild = buttonInteraction.guild;
            if (!guild) throw new Error("Guild not found");

            const member = await guild.members.fetch(m.author.id);
            const role = guild.roles.cache.find(
              (r) => r.name === transactionData.courseCode
            );

            if (role) {
              await member.roles.add(role);
              await dmChannel.send(
                `üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏® "${role.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å`
              );
            } else {
              await dmChannel.send(
                `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏® "${transactionData.courseCode}" ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô`
              );
            }
          } catch (roleError) {
            await dmChannel.send(
              `‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô`
            );
            console.error("Role Error:", roleError);
          }
        } else {
          await dmChannel.send(
            `‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${verifyResponse.data.message} /menu ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
          );
        }
      } catch (apiError: any) {
        await dmChannel.send(
          `‚ùå ${
            apiError.response?.data?.message ||
            "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà /menu ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
          }`
        );
        console.error("API Error:", apiError);
      }
    } catch (error) {
      await dmChannel.send(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏•‡∏¥‡∏õ`);
      console.error("QR Scan Error:", error);
    } finally {
      dmCollector.stop("done");
    }
  });
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á QR Code ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ
 */
async function showQRCodeAndWaitForSlip(
  interaction: ButtonInteraction | ModalSubmitInteraction,
  transactionData: any,
  discountMessage?: string
) {
  const { embed, qrAttachment } = await createQRPaymentEmbed(
    transactionData.id,
    transactionData.price,
    discountMessage
  );

  const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder()
      .setCustomId("upload_slip")
      .setLabel("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
      .setStyle(ButtonStyle.Success)
  );

  await interaction.reply({
    embeds: [embed],
    files: [qrAttachment],
    components: [row],
    ephemeral: true,
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á collector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° upload_slip
  const filter = (i: any) =>
    i.isButton() &&
    i.customId === "upload_slip" &&
    i.user.id === interaction.user.id;

  // Stop collector ‡πÄ‡∏Å‡πà‡∏≤
  if (activeCollectors.has(interaction.user.id)) {
    activeCollectors.get(interaction.user.id).stop("new_interaction");
  }

  const collector = interaction.channel?.createMessageComponentCollector({
    filter,
    max: 1,
    time: 600_000,
  });

  activeCollectors.set(interaction.user.id, collector);

  collector?.on("collect", async (buttonInteraction) => {
    activeCollectors.delete(interaction.user.id);
    if (!buttonInteraction.isButton()) return;
    await handleUploadSlip(buttonInteraction, transactionData);
  });

  collector?.on("end", (collected, reason) => {
    console.log(`Upload collector ended: ${reason}`);
    activeCollectors.delete(interaction.user.id);
  });
}

// ============= INTERACTION HANDLERS =============

async function handleMenuCommand(interaction: Interaction) {
  if (!interaction.isChatInputCommand()) return;
  if (interaction.commandName !== "menu") return;

  const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder()
      .setCustomId("menu_courses")
      .setLabel("All Courses")
      .setEmoji("üìö")
      .setStyle(ButtonStyle.Primary),
    new ButtonBuilder()
      .setLabel("About Tutor")
      .setEmoji("üë®‚Äçüè´")
      .setStyle(ButtonStyle.Link)
      .setURL(
        "https://drive.google.com/file/d/1meUhGyUyq3tNMIcq5udr3ZUt36mKGsNu/view?usp=sharing"
      ),
    new ButtonBuilder()
      .setCustomId("menu_support")
      .setLabel("Support")
      .setEmoji("üí¨")
      .setStyle(ButtonStyle.Secondary)
  );

  await interaction.reply({
    embeds: [
      new EmbedBuilder()
        .setColor("#5865F2")
        .setTitle("Main Menu")
        .setDescription(
          "**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£**\n\n" +
            "> üìö **All Course**\n" +
            "> ‡∏î‡∏π‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n\n" +
            "> üë®‚Äçüè´ **About Tutor**\n" +
            "> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå\n\n" +
            "> üí¨ **Support**\n" +
            "> ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"
        )
        .setFooter({
          text: "BennyAssistant ‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
        })
        .setTimestamp(),
    ],
    components: [row],
    ephemeral: true,
  });
}

async function handleMenuCoursesButton(interaction: ButtonInteraction) {
  try {
    const response = await axios.get<Course[]>(`${API_BASE_URL}/course`);
    const courses = response.data;

    if (courses.length === 0) {
      await interaction.reply({
        content: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
        ephemeral: true,
      });
      return;
    }

    const row = new ActionRowBuilder<ButtonBuilder>();
    courses.forEach((course, index) => {
      if (index < 5) {
        row.addComponents(
          new ButtonBuilder()
            .setCustomId(`course_${course.code}`)
            .setLabel(course.title)
            .setStyle(ButtonStyle.Success)
        );
      }
    });

    const courseEmbed = new EmbedBuilder()
      .setColor("#00D9FF")
      .setTitle("üìö All Courses")
      .setDescription("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≠‡∏ô")
      .setTimestamp();

    courses.forEach((course) => {
      courseEmbed.addFields({
        name: `**${course.title}**`,
        value: [
          `> **‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤:** \`${course.code}\``,
          `> **‡∏£‡∏≤‡∏Ñ‡∏≤:** ‡∏ø${Number(course.price).toLocaleString("th-TH")}`,
        ].join("\n"),
        inline: false,
      });
    });

    courseEmbed.setFooter({
      text: `\n‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Course ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á`,
    });

    await interaction.reply({
      embeds: [courseEmbed],
      components: [row],
      ephemeral: true,
    });
  } catch (error) {
    console.error("Error fetching courses:", error);
    await interaction.reply({
      content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      ephemeral: true,
    });
  }
}

async function handleMenuSupportButton(interaction: ButtonInteraction) {
  await interaction.reply({
    content:
      "üí¨ **Support**\n‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà Discord ‡∏ô‡∏µ‡πâ : <@495284915202424843>",
    ephemeral: true,
  });
}

async function handleCourseSelection(interaction: ButtonInteraction) {
  const courseCode = interaction.customId.replace("course_", "");

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    await axios.get(`${API_BASE_URL}/transaction/check`, {
      params: {
        username: interaction.user.username,
        courseCode,
      },
    });

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ error ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™ ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction ‡πÉ‡∏´‡∏°‡πà
    const courseResponse = await axios.get(
      `${API_BASE_URL}/course/${courseCode}`
    );

    await axios.post(`${API_BASE_URL}/transaction`, {
      username: interaction.user.username,
      courseCode,
      price: Number(courseResponse.data.price),
    });

    // ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    await showDiscountPrompt(interaction, courseCode);
  } catch (error: any) {
    if (error.response?.status === 408) {
      // Transaction ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ - ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      await showDiscountPrompt(interaction, courseCode);
    } else if (error.response?.status === 409) {
      // ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      await interaction.reply({
        content:
          "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
        ephemeral: true,
      });
    } else if (error.response?.status === 407) {
      // Transaction ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏™‡∏î‡∏á QR ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      const transactionData = error.response.data.transaction;
      await showQRCodeAndWaitForSlip(interaction, transactionData);
    } else {
      await interaction.reply({
        content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        ephemeral: true,
      });
    }
  }
}

async function showDiscountPrompt(
  interaction: ButtonInteraction,
  courseCode: string
) {
  const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder()
      .setCustomId(`Discounted_Code_yes_${courseCode}`)
      .setLabel("‡∏°‡∏µ")
      .setStyle(ButtonStyle.Success),
    new ButtonBuilder()
      .setCustomId(`Discounted_Code_No+${courseCode}`)
      .setLabel("‡πÑ‡∏°‡πà‡∏°‡∏µ")
      .setStyle(ButtonStyle.Danger)
  );

  await interaction.reply({
    embeds: [
      new EmbedBuilder()
        .setColor("#5865F2")
        .setTitle("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
        .setFooter({
          text: "BennyAssistant ‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
        })
        .setTimestamp(),
    ],
    components: [row],
    ephemeral: true,
  });
}

async function handleDiscountYesButton(interaction: ButtonInteraction) {
  const courseCode = interaction.customId.split("_")[3];

  const modal = new ModalBuilder()
    .setCustomId(`discountModal_${courseCode}`)
    .setTitle("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î");

  const discountInput = new TextInputBuilder()
    .setCustomId("discountCode")
    .setLabel("‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    .setStyle(TextInputStyle.Short)
    .setPlaceholder("‡πÄ‡∏ä‡πà‡∏ô SAVE20");

  const firstActionRow = new ActionRowBuilder<TextInputBuilder>().addComponents(
    discountInput
  );
  modal.addComponents(firstActionRow);

  await interaction.showModal(modal);
}

async function handleDiscountNoButton(interaction: ButtonInteraction) {
  const courseCode = interaction.customId.split("_")[3];

  try {
    const transaction = await axios.get(
      `${API_BASE_URL}/transaction/getTransactionByUsernameAndCourse`,
      {
        params: {
          username: interaction.user.username,
          courseCode,
        },
      }
    );

    await showQRCodeAndWaitForSlip(interaction, transaction.data);
  } catch (error) {
    console.error("Error fetching transaction:", error);
    await interaction.reply({
      content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      ephemeral: true,
    });
  }
}

async function handleDiscountModal(modalInteraction: ModalSubmitInteraction) {
  const discountCode =
    modalInteraction.fields.getTextInputValue("discountCode");
  const courseCode = modalInteraction.customId.split("_")[1];

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
    const response = await axios.get(
      `${API_BASE_URL}/discount/${discountCode}`
    );
    const discount = response.data;

    if (discount.used) {
      await modalInteraction.reply({
        content: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        ephemeral: true,
      });
      return;
    }

    // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
    discount.used = true;
    await axios.put(`${API_BASE_URL}/discount/`, discount);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô transaction
    await axios.put(`${API_BASE_URL}/transaction/updateDiscountPrice`, {
      code: discount.code,
      price: discount.discount_price,
      username: modalInteraction.user.username,
      courseCode,
    });

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• transaction ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
    const transaction = await axios.get(
      `${API_BASE_URL}/transaction/getTransactionByUsernameAndCourse`,
      {
        params: {
          username: modalInteraction.user.username,
          courseCode,
        },
      }
    );

    const discountMessage = `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î ${discount.discount_price} ‡∏ö‡∏≤‡∏ó`;
    await showQRCodeAndWaitForSlip(
      modalInteraction,
      transaction.data,
      discountMessage
    );
  } catch (error: any) {
    await modalInteraction.reply({
      content: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      ephemeral: true,
    });
    console.error("Discount Code Error:", error.message);
  }
}

// ============= MAIN INTERACTION HANDLER =============
client.on("interactionCreate", async (interaction) => {
  try {
    // Slash Commands
    if (interaction.isChatInputCommand()) {
      await handleMenuCommand(interaction);
      return;
    }

    // Button Interactions
    if (interaction.isButton()) {
      if (interaction.customId === "menu_courses") {
        await handleMenuCoursesButton(interaction);
      } else if (interaction.customId === "menu_support") {
        await handleMenuSupportButton(interaction);
      } else if (interaction.customId.startsWith("course_")) {
        await handleCourseSelection(interaction);
      } else if (interaction.customId.startsWith("Discounted_Code_yes")) {
        await handleDiscountYesButton(interaction);
      } else if (interaction.customId.startsWith("Discounted_Code_No")) {
        await handleDiscountNoButton(interaction);
      }
      return;
    }

    // Modal Submissions
    if (interaction.isModalSubmit()) {
      if (interaction.customId.startsWith("discountModal_")) {
        await handleDiscountModal(interaction);
      }
      return;
    }
  } catch (error) {
    console.error("Error handling interaction:", error);
  }
});

client.login(process.env.DISCORD_TOKEN);
