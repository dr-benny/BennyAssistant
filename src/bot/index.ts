import {
  Client,
  GatewayIntentBits,
  SlashCommandBuilder,
  REST,
  Routes,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ModalSubmitInteraction,
  AttachmentBuilder,
  Message,
  User,
  DMChannel,
  ButtonInteraction,
  StringSelectMenuInteraction,
  UserSelectMenuInteraction,
  MentionableSelectMenuInteraction,
  RoleSelectMenuInteraction,
  ChannelSelectMenuInteraction,
  Partials,
} from "discord.js";
import * as dotenv from "dotenv";
import axios from "axios";
import { Course } from "../models/Course";
import * as QRCode from "qrcode";
import jsQR from "jsqr";
import { createCanvas, loadImage } from "canvas";
import { error } from "console";
dotenv.config();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.MessageContent,
  ],
  partials: [Partials.Channel],
});
const clientId = process.env.CLIENT_ID;
const guildId = process.env.GUILD_ID;
const rest = new REST({ version: "10" }).setToken(process.env.DISCORD_TOKEN!);
const API_BASE_URL = process.env.API_BASE_URL || "http://localhost:3000";

const commands = [
  new SlashCommandBuilder().setName("menu").setDescription("‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"),
].map((command) => command.toJSON());

(async () => {
  try {
    console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands...");
    await rest.put(Routes.applicationGuildCommands(clientId!, guildId!), {
      body: commands,
    });
    console.log("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:", error);
  }
})();

client.once("ready", () => {
  console.log(`logged in as ${client.user?.tag}`);
});

client.on("interactionCreate", async (interaction) => {
  if (interaction.isChatInputCommand()) {
    if (interaction.commandName === "menu") {
      const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setCustomId("menu_courses")
          .setLabel("All Courses")
          .setEmoji("üìö")
          .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
          .setLabel("About Tutor")
          .setEmoji("üë®‚Äçüè´")
          .setStyle(ButtonStyle.Link)
          .setURL(
            "https://drive.google.com/file/d/1meUhGyUyq3tNMIcq5udr3ZUt36mKGsNu/view?usp=sharing"
          ),
        new ButtonBuilder()
          .setCustomId("menu_support")
          .setLabel("Support")
          .setEmoji("üí¨")
          .setStyle(ButtonStyle.Secondary)
      );
      await interaction.reply({
        embeds: [
          new EmbedBuilder()
            .setColor("#5865F2")
            .setTitle("Main Menu")
            .setDescription(
              "**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£**\n\n" +
                "> üìö **All Course**\n" +
                "> ‡∏î‡∏π‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n\n" +
                "> üë®‚Äçüè´ **About Tutor**\n" +
                "> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå\n\n" +
                "> üí¨ **Support**\n" +
                "> ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"
            )
            .setFooter({
              text: "BennyAssistant ‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
            })
            .setTimestamp(),
        ],
        components: [row],
        ephemeral: true,
      });
    }
  }

  if (interaction.isButton()) {
    if (interaction.customId === "menu_courses") {
      try {
        const response = await axios.get<Course[]>(`${API_BASE_URL}/course`);
        const courses = response.data;

        if (courses.length === 0) {
          await interaction.reply({
            content: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
            ephemeral: true,
          });
          return;
        }
        const row = new ActionRowBuilder<ButtonBuilder>();
        courses.forEach((course, index) => {
          if (index < 5) {
            row.addComponents(
              new ButtonBuilder()
                .setCustomId(`course_${course.code}`)
                .setLabel(course.title)
                .setStyle(ButtonStyle.Success)
            );
          }
        });

        const courseEmbed = new EmbedBuilder()
          .setColor("#00D9FF")
          .setTitle("üìö All Courses")
          .setDescription("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≠‡∏ô")
          .setTimestamp();

        courses.forEach((course, index) => {
          courseEmbed.addFields({
            name: `**${course.title}**`,
            value: [
              `> **‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤:** \`${course.code}\``,
              `> **‡∏£‡∏≤‡∏Ñ‡∏≤:** ‡∏ø${Number(course.price).toLocaleString("th-TH")}`,
            ].join("\n"),
            inline: false,
          });
        });

        courseEmbed.setFooter({
          text: `\n‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Course ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á`,
        });

        await interaction.reply({
          embeds: [courseEmbed],
          components: [row],
          ephemeral: true,
        });
      } catch (error) {
        console.error("Error fetching courses:", error);
        await interaction.editReply({
          content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      }
    } else if (interaction.customId === "menu_support") {
      await interaction.reply({
        content:
          "üí¨ **Support**\n‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà Discord ‡∏ô‡∏µ‡πâ : <@495284915202424843>",
        ephemeral: true,
      });
    } else if (interaction.customId.startsWith("course_")) {
      try {
        const response = await axios.get(`${API_BASE_URL}/transaction/check`, {
          params: {
            username: interaction.user.username,
            courseCode: interaction.customId.replace("course_", ""),
          },
        });
        const createTransactionResponse = await axios.post(
          `${API_BASE_URL}/transaction`,
          {
            username: interaction.user.username,
            courseCode: interaction.customId.replace("course_", ""),
            price: Number(
              await axios
                .get(
                  `${API_BASE_URL}/course/${interaction.customId.replace(
                    "course_",
                    ""
                  )}`
                )
                .then((res) => res.data.price)
            ),
          }
        );
        const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
          new ButtonBuilder()
            .setCustomId(
              "Discounted_Code_yes_" +
                interaction.customId.replace("course_", "")
            )
            .setLabel("‡∏°‡∏µ")
            .setStyle(ButtonStyle.Success),
          new ButtonBuilder()
            .setCustomId(
              "Discounted_Code_No+" +
                interaction.customId.replace("course_", "")
            )
            .setLabel("‡πÑ‡∏°‡πà‡∏°‡∏µ")
            .setStyle(ButtonStyle.Danger)
        );
        await interaction.reply({
          embeds: [
            new EmbedBuilder()
              .setColor("#5865F2")
              .setTitle("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
              .setFooter({
                text: "BennyAssistant ‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
              })
              .setTimestamp(),
          ],
          components: [row],
          ephemeral: true,
        });
      } catch (error: any) {
        if (error.response.status == 408) {
          const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
            new ButtonBuilder()
              .setCustomId(
                `Discounted_Code_yes_${interaction.customId.replace(
                  "course_",
                  ""
                )}`
              )
              .setLabel("‡∏°‡∏µ")
              .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
              .setCustomId(
                "Discounted_Code_No+" +
                  interaction.customId.replace("course_", "")
              )
              .setLabel("‡πÑ‡∏°‡πà‡∏°‡∏µ")
              .setStyle(ButtonStyle.Danger)
          );
          await interaction.reply({
            embeds: [
              new EmbedBuilder()
                .setColor("#5865F2")
                .setTitle("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
                .setFooter({
                  text: "BennyAssistant ‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
                })
                .setTimestamp(),
            ],
            components: [row],
            ephemeral: true,
          });
        } else if (error.response.status == 409) {
          await interaction.reply({
            content:
              "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
            ephemeral: true,
          });
        } else if (error.response.status == 407) {
          const response = await axios.post(
            `${API_BASE_URL}/transaction/createQrCode`,
            {
              transactionId: error.response.data.transaction.id,
            }
          );
          const qrBuffer = await QRCode.toBuffer(response.data.qrCodeData);
          const qrAttachment = new AttachmentBuilder(qrBuffer, {
            name: "qrcode.png",
          });
          const qrCodeUrl = await QRCode.toDataURL(response.data.qrCodeData);
          const price = Number(
            error.response.data.transaction.price
          ).toLocaleString("th-TH");

          const embed = {
            color: 0x00bfff,
            title: "!! ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£  !!",
            description: [
              "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
              "",
              "üïí *‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ñ‡πà ",
              "**10 ‡∏ô‡∏≤‡∏ó‡∏µ** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ upload ‡πÇ‡∏õ‡∏£‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡∏Å‡∏î!!!*",
              "",
              `**‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞:** ‡∏ø${price}`,
            ].join("\n"),
            image: { url: "attachment://qrcode.png" },
            footer: { text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ BennyBot" },
            timestamp: new Date().toISOString(),
          };
          const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
            new ButtonBuilder()
              .setCustomId("upload_slip")
              .setLabel("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
              .setStyle(ButtonStyle.Success)
          );

          await interaction.reply({
            embeds: [embed],
            files: [qrAttachment],
            components: [row],
            ephemeral: true,
          });

          const filter = (
            i:
              | ButtonInteraction
              | StringSelectMenuInteraction
              | UserSelectMenuInteraction
              | RoleSelectMenuInteraction
              | MentionableSelectMenuInteraction
              | ChannelSelectMenuInteraction
          ) => {
            return (
              i.isButton() &&
              i.customId === "upload_slip" &&
              i.user.id === interaction.user.id
            );
          };
          const activeCollectors = new Map<string, any>();
          if (activeCollectors.has(interaction.user.id)) {
            activeCollectors.get(interaction.user.id).stop("new_interaction");
          }

          const collector =
            interaction.channel?.createMessageComponentCollector({
              filter,
              max: 1,
              time: 600_000,
            });

          activeCollectors.set(interaction.user.id, collector);
          async function handleUploadSlip(interaction: ButtonInteraction) {
            const user: User = interaction.user;

            let dmChannel: DMChannel;
            try {
              dmChannel = await user.createDM();
            } catch (err) {
              await interaction.reply({
                content:
                  "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î DM ‡∏Å‡∏±‡∏ö bot ‡∏Å‡πà‡∏≠‡∏ô",
                ephemeral: true,
              });
              return;
            }

            await interaction.reply({
              content:
                "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Å DM ‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏ú‡πà‡∏≤‡∏ô DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ö Bot",
              ephemeral: true,
            });

            const duration = 600;
            let remaining = duration;

            const sentMessage = await dmChannel.send(
              `üìé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ó‡∏µ‡πà DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á bot ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!`
            );

            const interval = setInterval(async () => {
              remaining--;
              try {
                await sentMessage.edit(
                  `üìé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ó‡∏µ‡πà DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á bot ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!`
                );
              } catch {
                clearInterval(interval);
              }
              if (remaining <= 0) {
                clearInterval(interval);
                try {
                  await sentMessage.edit(
                    "‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÇ‡∏î‡∏¢ /menu ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å"
                  );
                } catch {}
                dmCollector.stop("time");
              }
            }, 1000);
            const dmCollector = dmChannel.createMessageCollector({
              filter: (m) => m.author.id === user.id && m.attachments.size > 0,
              time: 600_000,
              max: 1,
            });

            dmCollector.on("collect", async (m: Message) => {
              clearInterval(interval);
              dmCollector.stop("time");
              const slip = m.attachments.first();

              if (!slip) return;
              await dmChannel.send(`‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ...`);

              try {
                const image = await loadImage(slip.url);
                const canvas = createCanvas(image.width, image.height);
                const ctx = canvas.getContext("2d");
                ctx.drawImage(image, 0, 0);

                const imageData = ctx.getImageData(
                  0,
                  0,
                  image.width,
                  image.height
                );

                const qrCode = jsQR(
                  imageData.data,
                  imageData.width,
                  imageData.height
                );

                if (qrCode) {
                  const qrData = qrCode.data;

                  try {
                    const verifyResponse = await axios.post(
                      `https://api.slipok.com/api/line/apikey/${process.env.BRANCH_ID}`,
                      {
                        data: qrData,
                        log: true,
                        amount: Number(error.response.data.transaction.price),
                      },
                      {
                        headers: {
                          "Content-Type": "application/json",
                          "x-authorization": process.env.SLIPOK_API_KEY,
                        },
                      }
                    );

                    if (verifyResponse.data.success) {
                      await dmChannel.send(
                        `‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÉ‡∏ô discord ‡πÅ‡∏•‡∏∞ ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô!`
                      );
                      try {
                        const guild = interaction.guild;
                        const member = await guild!.members.fetch(m.author.id);
                        const role = guild!.roles.cache.find(
                          (r) =>
                            r.name ===
                            `${error.response.data.transaction.courseCode}`
                        );

                        if (role) {
                          await member.roles.add(role);
                          await dmChannel.send(
                            `üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏® "${role.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å`
                          );
                        } else {
                          await dmChannel.send(
                            `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏® "${error.response.data.transaction.courseCode}" ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô`
                          );
                        }
                      } catch (roleError) {
                        await dmChannel.send(
                          `‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô`
                        );
                        console.error("Role Error:", roleError);
                      }
                    } else {
                      await dmChannel.send(
                        `‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${verifyResponse.data.message} /menu ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
                      );
                    }
                  } catch (apiError: any) {
                    await dmChannel.send(
                      `‚ùå ${
                        apiError.response?.data?.message ||
                        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà /menu ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                      }`
                    );
                    console.error("API Error:", apiError);
                  }
                } else {
                  await dmChannel.send(
                    `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
                  );
                }
              } catch (error) {
                await dmChannel.send(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏•‡∏¥‡∏õ`);
                console.error("QR Scan Error:", error);
              }

              dmCollector.stop("done");
            });
          }
          collector?.on("collect", async (buttonInteraction) => {
            activeCollectors.delete(interaction.user.id);
            if (!buttonInteraction.isButton()) return;
            await handleUploadSlip(buttonInteraction);
          });
        }
      }
    } else if (interaction.customId.startsWith("Discounted_Code_yes")) {
      const modal = new ModalBuilder()
        .setCustomId("discountModal_" + interaction.customId.split("_")[3])
        .setTitle("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î");

      const discountInput = new TextInputBuilder()
        .setCustomId("discountCode")
        .setLabel("‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        .setStyle(TextInputStyle.Short)
        .setPlaceholder("‡πÄ‡∏ä‡πà‡∏ô SAVE20");

      const firstActionRow =
        new ActionRowBuilder<TextInputBuilder>().addComponents(discountInput);
      modal.addComponents(firstActionRow);

      await interaction.showModal(modal);
    } else if (interaction.customId.startsWith("Discounted_Code_No")) {
      const transaction = await axios.get(
        `${API_BASE_URL}/transaction/getTransactionByUsernameAndCourse`,
        {
          params: {
            username: interaction.user.username,
            courseCode: interaction.customId.split("_")[3],
          },
        }
      );
      console.log(transaction.data.id);

      const response_QR = await axios.post(
        `${API_BASE_URL}/transaction/createQrCode`,
        {
          transactionId: transaction.data.id,
        }
      );
      const qrBuffer = await QRCode.toBuffer(response_QR.data.qrCodeData);
      const qrAttachment = new AttachmentBuilder(qrBuffer, {
        name: "qrcode.png",
      });
      const qrCodeUrl = await QRCode.toDataURL(response_QR.data.qrCodeData);
      const price = Number(transaction.data.price).toLocaleString("th-TH");

      const embed = {
        color: 0x00bfff,
        title: "!! ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£  !!",
        description: [
          "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
          "",
          "üïí *‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ñ‡πà ",
          "**10 ‡∏ô‡∏≤‡∏ó‡∏µ** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ upload ‡πÇ‡∏õ‡∏£‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡∏Å‡∏î!!!*",
          "",
          `**‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞:** ‡∏ø${price}`,
        ].join("\n"),
        image: { url: "attachment://qrcode.png" },
        footer: { text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ BennyBot" },
        timestamp: new Date().toISOString(),
      };
      const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setCustomId("upload_slip")
          .setLabel("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
          .setStyle(ButtonStyle.Success)
      );

      await interaction.reply({
        embeds: [embed],
        files: [qrAttachment],
        components: [row],
        ephemeral: true,
      });

      const filter = (
        i:
          | ButtonInteraction
          | StringSelectMenuInteraction
          | UserSelectMenuInteraction
          | RoleSelectMenuInteraction
          | MentionableSelectMenuInteraction
          | ChannelSelectMenuInteraction
      ) => {
        return (
          i.isButton() &&
          i.customId === "upload_slip" &&
          i.user.id === interaction.user.id
        );
      };

      const activeCollectors = new Map<string, any>();
      if (activeCollectors.has(interaction.user.id)) {
        activeCollectors.get(interaction.user.id).stop("new_interaction");
      }
      const collector = interaction.channel?.createMessageComponentCollector({
        filter,
        max: 1,
        time: 600_000,
      });
      activeCollectors.set(interaction.user.id, collector);
      async function handleUploadSlip(interaction: ButtonInteraction) {
        const user: User = interaction.user;

        let dmChannel: DMChannel;
        try {
          dmChannel = await user.createDM();
        } catch (err) {
          await interaction.reply({
            content: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î DM ‡∏Å‡∏±‡∏ö bot ‡∏Å‡πà‡∏≠‡∏ô",
            ephemeral: true,
          });
          return;
        }

        await interaction.reply({
          content: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Å DM ‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏ú‡πà‡∏≤‡∏ô DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ö Bot",
          ephemeral: true,
        });

        const duration = 600;
        let remaining = duration;

        const sentMessage = await dmChannel.send(
          `üìé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ó‡∏µ‡πà DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á bot ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!`
        );

        const interval = setInterval(async () => {
          remaining--;
          try {
            await sentMessage.edit(
              `üìé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ó‡∏µ‡πà DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á bot ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!`
            );
          } catch {
            clearInterval(interval);
          }
          if (remaining <= 0) {
            clearInterval(interval);
            try {
              await sentMessage.edit(
                "‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÇ‡∏î‡∏¢ /menu ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å"
              );
            } catch {}
            dmCollector.stop("time");
          }
        }, 1000);
        const dmCollector = dmChannel.createMessageCollector({
          filter: (m) => m.author.id === user.id && m.attachments.size > 0,
          time: 600_000,
          max: 1,
        });

        dmCollector.on("collect", async (m: Message) => {
          clearInterval(interval);
          dmCollector.stop("time");
          const slip = m.attachments.first();

          if (!slip) return;
          await dmChannel.send(`‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ...`);

          try {
            const image = await loadImage(slip.url);
            const canvas = createCanvas(image.width, image.height);
            const ctx = canvas.getContext("2d");
            ctx.drawImage(image, 0, 0);

            const imageData = ctx.getImageData(0, 0, image.width, image.height);

            const qrCode = jsQR(
              imageData.data,
              imageData.width,
              imageData.height
            );

            if (qrCode) {
              const qrData = qrCode.data;

              try {
                const verifyResponse = await axios.post(
                  `https://api.slipok.com/api/line/apikey/${process.env.BRANCH_ID}`,
                  {
                    data: qrData,
                    log: true,
                    amount: Number(transaction.data.price),
                  },
                  {
                    headers: {
                      "Content-Type": "application/json",
                      "x-authorization": process.env.SLIPOK_API_KEY,
                    },
                  }
                );

                if (verifyResponse.data.success) {
                  await dmChannel.send(
                    `‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÉ‡∏ô discord ‡πÅ‡∏•‡∏∞ ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô!`
                  );
                  axios.put(`${API_BASE_URL}/transaction/updatePaymentStatus`, {
                    id: transaction.data.id,
                    paid: true,
                  });
                  try {
                    const guild = interaction.guild;
                    const member = await guild!.members.fetch(m.author.id);
                    const role = guild!.roles.cache.find(
                      (r) => r.name === `${transaction.data.courseCode}`
                    );

                    if (role) {
                      await member.roles.add(role);
                      await dmChannel.send(
                        `üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏® "${role.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å`
                      );
                    } else {
                      await dmChannel.send(
                        `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏® "${transaction.data.courseCode}" ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô`
                      );
                    }
                  } catch (roleError) {
                    await dmChannel.send(
                      `‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô`
                    );
                    console.error("Role Error:", roleError);
                  }
                } else {
                  await dmChannel.send(
                    `‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${verifyResponse.data.message} /menu ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
                  );
                }
              } catch (apiError: any) {
                await dmChannel.send(
                  `‚ùå ${
                    apiError.response?.data?.message ||
                    "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà /menu ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                  }`
                );
                console.error("API Error:", apiError);
              }
            } else {
              await dmChannel.send(
                `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
              );
            }
          } catch (error) {
            await dmChannel.send(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏•‡∏¥‡∏õ`);
            console.error("QR Scan Error:", error);
          }

          dmCollector.stop("done");
        });
      }
      collector?.on("collect", async (buttonInteraction) => {
        activeCollectors.delete(interaction.user.id);
        if (!buttonInteraction.isButton()) return;
        await handleUploadSlip(buttonInteraction);
      });
    }
  } else if (interaction.isModalSubmit()) {
    const modalInteraction: ModalSubmitInteraction = interaction;
    if (modalInteraction.customId.startsWith("discountModal_")) {
      const discountCode =
        modalInteraction.fields.getTextInputValue("discountCode");
      const url = `${API_BASE_URL}/discount/${discountCode}`;
      try {
        const response = await axios.get(url);
        const discount = response.data;
        if (discount.used == true) {
          await modalInteraction.reply({
            content: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            ephemeral: true,
          });
          return;
        }
        discount.used = true;
        await axios.put(`${API_BASE_URL}/discount/`, discount);

        await axios.put(`${API_BASE_URL}/transaction/updateDiscountPrice`, {
          code: discount.code,
          price: discount.discount_price,
          username: modalInteraction.user.username,
          courseCode: modalInteraction.customId.split("_")[1],
        });

        const transaction = await axios.get(
          `${API_BASE_URL}/transaction/getTransactionByUsernameAndCourse`,
          {
            params: {
              username: modalInteraction.user.username,
              courseCode: modalInteraction.customId.split("_")[1],
            },
          }
        );

        const response_QR = await axios.post(
          `${API_BASE_URL}/transaction/createQrCode`,
          {
            transactionId: transaction.data.id,
          }
        );
        const qrBuffer = await QRCode.toBuffer(response_QR.data.qrCodeData);
        const qrAttachment = new AttachmentBuilder(qrBuffer, {
          name: "qrcode.png",
        });
        const qrCodeUrl = await QRCode.toDataURL(response_QR.data.qrCodeData);
        const price = Number(transaction.data.price).toLocaleString("th-TH");

        const embed = {
          color: 0x00bfff,
          title: "!! ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£  !!",
          description: [
            `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î ${discount.discount_price} ‡∏ö‡∏≤‡∏ó`,
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
            "",
            "üïí *‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ñ‡πà ",
            "**10 ‡∏ô‡∏≤‡∏ó‡∏µ** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ upload ‡πÇ‡∏õ‡∏£‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡∏Å‡∏î!!!*",
            "",
            `**‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞:** ‡∏ø${price}`,
          ].join("\n"),
          image: { url: "attachment://qrcode.png" },
          footer: { text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ BennyBot" },
          timestamp: new Date().toISOString(),
        };
        const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
          new ButtonBuilder()
            .setCustomId("upload_slip")
            .setLabel("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
            .setStyle(ButtonStyle.Success)
        );

        await modalInteraction.reply({
          embeds: [embed],
          files: [qrAttachment],
          components: [row],
          ephemeral: true,
        });

        const filter = (
          i:
            | ButtonInteraction
            | StringSelectMenuInteraction
            | UserSelectMenuInteraction
            | RoleSelectMenuInteraction
            | MentionableSelectMenuInteraction
            | ChannelSelectMenuInteraction
        ) => {
          return (
            i.isButton() &&
            i.customId === "upload_slip" &&
            i.user.id === modalInteraction.user.id
          );
        };

        const activeCollectors = new Map<string, any>();
        if (activeCollectors.has(interaction.user.id)) {
          activeCollectors.get(interaction.user.id).stop("new_interaction");
        }
        const collector =
          modalInteraction.channel?.createMessageComponentCollector({
            filter,
            max: 1,
            time: 600_000,
          });

        activeCollectors.set(interaction.user.id, collector);
        async function handleUploadSlip(modalInteraction: ButtonInteraction) {
          const user: User = modalInteraction.user;

          let dmChannel: DMChannel;
          try {
            dmChannel = await user.createDM();
          } catch (err) {
            await modalInteraction.reply({
              content: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î DM ‡∏Å‡∏±‡∏ö bot ‡∏Å‡πà‡∏≠‡∏ô",
              ephemeral: true,
            });
            return;
          }

          await modalInteraction.reply({
            content:
              "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Å DM ‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏ú‡πà‡∏≤‡∏ô DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ö Bot",
            ephemeral: true,
          });

          const duration = 600;
          let remaining = duration;

          const sentMessage = await dmChannel.send(
            `üìé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ó‡∏µ‡πà DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á bot ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!`
          );

          const interval = setInterval(async () => {
            remaining--;
            try {
              await sentMessage.edit(
                `üìé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ó‡∏µ‡πà DM ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á bot ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!`
              );
            } catch {
              clearInterval(interval);
            }
            if (remaining <= 0) {
              clearInterval(interval);
              try {
                await sentMessage.edit(
                  "‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÇ‡∏î‡∏¢ /menu ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å"
                );
              } catch {}
              dmCollector.stop("time");
            }
          }, 1000);
          const dmCollector = dmChannel.createMessageCollector({
            filter: (m) => m.author.id === user.id && m.attachments.size > 0,
            time: 600_000,
            max: 1,
          });

          dmCollector.on("collect", async (m: Message) => {
            clearInterval(interval);
            dmCollector.stop("time");
            const slip = m.attachments.first();

            if (!slip) return;
            await dmChannel.send(`‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ...`);

            try {
              const image = await loadImage(slip.url);
              const canvas = createCanvas(image.width, image.height);
              const ctx = canvas.getContext("2d");
              ctx.drawImage(image, 0, 0);

              const imageData = ctx.getImageData(
                0,
                0,
                image.width,
                image.height
              );

              const qrCode = jsQR(
                imageData.data,
                imageData.width,
                imageData.height
              );

              if (qrCode) {
                const qrData = qrCode.data;

                try {
                  const verifyResponse = await axios.post(
                    `https://api.slipok.com/api/line/apikey/${process.env.BRANCH_ID}`,
                    {
                      data: qrData,
                      log: true,
                      amount: Number(transaction.data.price),
                    },
                    {
                      headers: {
                        "Content-Type": "application/json",
                        "x-authorization": process.env.SLIPOK_API_KEY,
                      },
                    }
                  );

                  if (verifyResponse.data.success) {
                    await dmChannel.send(
                      `‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÉ‡∏ô discord ‡πÅ‡∏•‡∏∞ ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô!`
                    );
                    axios.put(
                      `${API_BASE_URL}/transaction/updatePaymentStatus`,
                      {
                        id: transaction.data.id,
                        paid: true,
                      }
                    );
                    try {
                      const guild = modalInteraction.guild;
                      const member = await guild!.members.fetch(m.author.id);
                      const role = guild!.roles.cache.find(
                        (r) => r.name === `${transaction.data.courseCode}`
                      );

                      if (role) {
                        await member.roles.add(role);
                        await dmChannel.send(
                          `üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏® "${role.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å`
                        );
                      } else {
                        await dmChannel.send(
                          `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏® "${transaction.data.courseCode}" ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô`
                        );
                      }
                    } catch (roleError) {
                      await dmChannel.send(
                        `‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô`
                      );
                      console.error("Role Error:", roleError);
                    }
                  } else {
                    await dmChannel.send(
                      `‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${verifyResponse.data.message} /menu ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
                    );
                  }
                } catch (apiError: any) {
                  await dmChannel.send(
                    `‚ùå ${
                      apiError.response?.data?.message ||
                      "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà /menu ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                    }`
                  );
                  console.error("API Error:", apiError);
                }
              } else {
                await dmChannel.send(
                  `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
                );
              }
            } catch (error) {
              await dmChannel.send(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏•‡∏¥‡∏õ`);
              console.error("QR Scan Error:", error);
            }

            dmCollector.stop("done");
          });
        }
        collector?.on("collect", async (buttonInteraction) => {
          activeCollectors.delete(interaction.user.id);
          if (!buttonInteraction.isButton()) return;
          await handleUploadSlip(buttonInteraction);
        });
      } catch (error: any) {
        await modalInteraction.reply({
          content: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
          ephemeral: true,
        });
        console.error("Discount Code Error:", error.message);
      }
    }
  }
});

client.login(process.env.DISCORD_TOKEN);
